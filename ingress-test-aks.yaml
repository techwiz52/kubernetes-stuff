# This Kubernetes YAML file is my first successful test of an
# ingress controller using AKS that routes to two different
# deployed pods based upon the URI path. The example was derived
# from the Kubernetes example at the following web address:
#
#   https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/
#
# Azure documentation was also used in order to deploy the ingress
# test to an AKS, using the following 2 URLs:
#   https://docs.microsoft.com/en-us/azure/aks/ingress-basic
#   https://docs.microsoft.com/en-us/azure/aks/kubernetes-helm
#
# You first need to execute some helm commands to install the
# nginx-ingress controller:
#   kubectl apply -f helm-rbac-aks.yaml
#   helm init --history-max 200 --service-account tiller --node-selectors "beta.kubernetes.io/os=linux"
#   helm install stable/nginx-ingress \
#   --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
#   --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux
#
# Then repeat entering this command until an external IP address is created:
#   kubectl get service
#
# Then run the following command to create the 2 web application services
# and the ingress service mapping:
#
#   kubectl apply -f ingress-test-aks.yaml

# Once you have the minikube IP addr and the service port the ingress
# controller is exposed on, update the /etc/hosts file on the VM
# running minikube and add a new line to the end like:
#    <aa.bb.cc.dd> hello-world.info
#
# Then on the VM, you can access the ingress controller with the
# following URIs to access different backend pods:
#    curl <External IP>/v1
#    curl <External IP>/v2
#
# To delete the ingress exampl, enter the following command:
#    kubectl delete -f ingress-test-aks.yaml
#
#
---
 apiVersion: extensions/v1beta1
 kind: Deployment
 metadata:
   name: web
 spec:
   replicas: 1
   template:
     metadata:
       labels:
         app: web
     spec:
       containers:
         - name: web-container
           image: gcr.io/google-samples/hello-app:1.0
           ports:
             - containerPort: 8080
---
 apiVersion: v1
 kind: Service
 metadata:
   name: web-service
   labels:
     app: web
 spec:
   type: NodePort
   ports:
   - port: 8080
     protocol: TCP
   selector:
     app: web
---
 apiVersion: extensions/v1beta1
 kind: Deployment
 metadata:
   name: web2
 spec:
   replicas: 1
   template:
     metadata:
       labels:
         app: web2
     spec:
       containers:
         - name: web-container
           image: gcr.io/google-samples/hello-app:2.0
           ports:
             - containerPort: 8080
---
 apiVersion: v1
 kind: Service
 metadata:
   name: web-service2
   labels:
     app: web2
 spec:
   type: NodePort
   ports:
   - port: 8080
     protocol: TCP
   selector:
     app: web2
---
 apiVersion: extensions/v1beta1
 kind: Ingress
 metadata:
   name: ingress-test
   annotations:
     kubernetes.io/ingress.class: nginx
     nginx.ingress.kubernetes.io/ssl-redirect: "false"
     nginx.ingress.kubernetes.io/rewrite-target: /$1
 spec:
   rules:
   - http:
       paths:
       - path: /*
         backend:
           serviceName: web-service
           servicePort: 8080
       - path: /v2/*
         backend:
           serviceName: web-service2
           servicePort: 8080
